<Java프로그래밍 고급>

교육기간: 2016/09/03 (09:00~18:00)
          2016/09/10 (10:00~18:00)

식사시간: 13:00~14:00

강사: 이길재
이메일: jaelee1004@naver.com

교육내용: 자바I/O, 예외처리
          CollectionFramework(List,Map,Set)
          스레드, Socket

파일공유
  ftp://192.168.0.103
       ==> 아이디: gildong
       ==> 비번: 없음

자바개발툴(eclipse)
  ----> http://www.eclipse.org
          ----> eclipse-jee-neon-R-win32-x86_64.zip파일 다운로드
          ----> 압축풀기(주말과정 드라이브)
          ----> eclipse.exe 실행
          
================================================================================
자바 I/O(입출력)  ------>   Stream이다!!
    
    Stream : 순차적인 데이터(1byte)의 흐름이다.
      - InputStream(입력스트림)  : 1byte단위로 읽어들이는(read) 객체
      - OutputStream(출력스트림) : 1byte단위로 쓰는(write) 객체

      - Reader(입력객체) : 문자(char,2byte)단위 입력객체
      - Writer(출력객체) : 문자(char,2byte)단위 출력객체

    ===> 자바 I/O 4대 클래스 (java.io패키지) : 추상클래스!! 
   
        InputStream in = new InputSteam();  (X)
        InputStream in = 자식클래스객체 생성; (O)
        InputStream in = new FileInputSteam(); (O)
          부모클래스          자식클래스

   <추상클래스>
   - 자식클래스를 제어할 목적으로 사용하는 클래스
   - 클래스내에 공통적인 특성을 선언하고 지원하는 클래스
   - 스스로 객체생성이 불가능 ---> 자식클래스 객체생성하여 사용
      Parent p = new Child();
      Child  c = new Child();
     
      자식클래스는 부모클래스와 같다!!
      
<노드스트림>
  ---> 자바의 기본스트림(1byte를 쓰고 읽기)
  InputStream  
  
<필터스트림>
  ---> 가공된 스트림, 기능 추가된 스트림
  BufferedInputStream
  
<브릿지스트림>
  ---> 1byte ---> 2byte(char)로 변환해주는 스트림  
  InputStreamReader

  System.in : 표준입력(장치) : 키보드
  System.out: 표준출력(장치) : 화면콘솔
  
  InputStream is = System.in;//byte입력객체
  InputStreamReader isr = new InputStreamReader(is);//byte--->문자 변환
  BufferedReader br = new BufferedReader(isr);//문자를 버퍼에 저장
     //데이터 읽기
     String str = br.readLine();//라인단위로 데이터를 읽기
     System.out.println("STR="+ str);
  
==========================================================================
<Exception> 예외처리
- 프로그램 실행 중에 발생하는 예기치 않은 사건.
  (자바는 프로그램 실행 중 발생할 수 있는 예외를 처리할 수 있는 기법제공.
   발생하는 모든 예외를 객체로 취급, 예외관련 클래스를 제공)

예)  정수를 0으로 나누는 경우      
      System.out.println(10/0);
      
     배열의 첨자가 음수값을 가지는 경우
      int su[]={11,22 ,33};
          //su [0] [1] [2]
      System.out.println(su[1]);(O)
      System.out.println(su[-1]);(X)
     
     배열 첨자가 배열의 크기를 벗어나는 경우
      System.out.println(su[2]);(O)
      System.out.println(su[3]);(O)
     
     
     부적절한 형변환이 일어나는 경우
         (int)"홍길동"
         (B)A   ---> A클래스와 B클래스는 상속관계가 없다
         (Parent)Child   (Child)Parent ---> 상속관계에 있었을 때만 캐스팅이 가능.
              <----         <------
                 자동형변환               명시적형변환                 
              
     입출력시 인터럽트가 발생하는 경우
     
     입출력위해 지정한 파일이 없거나 파일 이름이 틀린경우.....
     
예외상황처리 ---> 자바언어를 더욱 강하게(robust) 만드는 요인!!

    기본예외상황처리기
    
         프로그램
         |        
         | 실행           JVM : 예외발생시 관련된 예외클래스로 부터 예외 객체생성,        
         |                       프로그램에서 지정된 예외처리루틴에게 넘겨준다.
         예외발생
     
     
     
<Exception 클래스 계층구조>

                java.lang.Object
                           |
                java.lang.Throwable
                           |
               ------------------------
              |                        |
            Error                  Exception
          
 Error : 하드디스크 포맷이 망가진경우,  메모리파괴, 스택오버플로우
         (프로그램처리하지 않고 JVM에게 맡겨주는게 일반적임)  

<예외처리 구문 형식> (try~catch문)

 메소드(){
    문장1;
  
  try{  
          문장2; ====> 예외가 발생할 가능성이 있는 문장!!
  }catch(변수선언==> 발생할수있는 예외클래스 변수선언===>예) IOException e){
     try블럭내에서 만약 예외가 발생한다면 실행할 문장
  } 
    
    문장3;
 }

   
 try{
      예외가 발생할 가능성이 있는 문장;
     }catch(예외타입 변수명){//catch(변수선언)
        실제 예외발생 발생시 처리할 문장; 
     }
     
 리턴형 메소드명(){
   AException이 발생할 가능성이 있는 문장;   
   BException이 발생할 가능성이 있는 문장;   
   CException이 발생할 가능성이 있는 문장;   
}

예외처리 case1) 각각 처리

  try{  
    AException이 발생할 가능성이 있는 문장;   
    }catch(AException ae){
       AException발생시 처리할 문장;
    }
    
  try{
    BException이 발생할 가능성이 있는 문장;  
    }catch(BException be){
       BException발생시 처리할 문장;
    } 
     
  try{ 
    CException이 발생할 가능성이 있는 문장;   
     }catch(CException ce){
       CException발생시 처리할 문장;
     }

예외처리 case2) 다중catch를 사용

  try{
    AException이 발생할 가능성이 있는 문장;
    BException이 발생할 가능성이 있는 문장;
    CException이 발생할 가능성이 있는 문장;
    
       DB관련객체생성    db;
       File관련객체생성  f;
    
       //자원반환
         db.close();
         f.close();
         
   }catch(AException e){
       AException발생시 처리할 문장;
   }catch(BException e){
       BException발생시 처리할 문장;      
   }catch(CException e){
       CException발생시 처리할 문장;
   }finally{
       예외발생과 상관없이 반드시 실행해야 할 문장;
        //자원반환
         db.close();
         f.close();
   }

  try{
      ParentException이 발생할 가능성이 있는 문장1;
      ChildException이 발생할 가능성이 있는 문장2; 발생!!
   }catch(ParentException e){//Parent e = new Child();(O)
       ParentException발생시 처리할 문장;
   }catch(ChildException e){
       ChildException발생시 처리할 문장;
   } -----> (X)
   
  try{
      ParentException이 발생할 가능성이 있는 문장1; 발생!!
      ChildException이 발생할 가능성이 있는 문장2;
   }catch(ChildException e){//Child e = new Parent();(X)
       ChildException발생시 처리할 문장;
   }catch(ParentException e){
       ParentException발생시 처리할 문장;
   } -----> (O)




※다중catch사용시 주의할 점: 
    만약 Exception들이 상속관계를 갖는 다면 자식클래스부터 정의를 해야함!!
   
   class ChildException extends ParentException
   {
   
   }
 ------------------------
   void m1(){
     try{
         문장1(ParentException가능성);
         문장2(ChildException가능성);
       }catch(ParentException pe){ (X)
          //ParentException pe = new ChildException(); 이 가능하므로
          ChildException발생시에도 현 catch()문에서 처리.
          즉, 밑의 catch문은 전혀 실행되지 않음!!
       }catch(ChildException ce){
       
       }   
   }     
    
<상속관계에서의 예외>
- 상위클래스의 throws 예외 는 하위클래스에서 축소되어야 함.

class Parent{
   public void hello()throws AException, BException{}
} 

class Child extends Parent{
   public void hello()throws AException, BException{}  (O)
   public void hello()throws AException{} (O)
   public void hello()throws BException{} (O)
   public void hello(){}  (O)
   
   public void hello()throws AException, BException, CException{}  (X)
   public void hello()throws CException{}  (X)
   public void hello()throws Exception{}  (X)
}


<사용자정의 예외>
- 예외의 발생은 JVM에 의해 실행중 발생할 수도 있지만
  사용자 프로그램에서 인위적으로 예외를 발생시킬 수 있다
  (throw문을 제공)
  
class MyException extends Exception{
         //is a
         
   MyException(String message){
       super(message);
   }      
         
}  
  
형식)
    throw 예외객체;
    throw new 예외객체타입(매개변수); 
    
    throw new MyException("사용자정의예외");
    MyException m = new MyException("사용자정의예외");
    throw m;
 
 class A{
    void c(D d){
    
    } 
 }
 
    
  A a=null;
    a = new A();
  D d=null;  
  a.c(d);  //NullPointerException발생!!----> 발생원인(범인)? 대부분 a
           왜? null.c(d); 
           
  class A{
     void c(D d){
        if(d==null) throw new NullPointerException();
     }
  
  }         
           
------------------------------------------------------------------
  퀴즈)
       
       int a,b,c=10;
       
       if(20<10){
          a=20;
          b=30;
       }else{
          a=40;
       }
       
       try{
               예외 가능성 문장;
          b=50;
       }catch(Exception e){}
       
       System.out.println(a); ---->정상적인 출력
       System.out.println(b); ----> if문,try블럭은 실행을 안할 수 있기 때문에 에러!!
       System.out.println(c); ---->정상적인 출력  



